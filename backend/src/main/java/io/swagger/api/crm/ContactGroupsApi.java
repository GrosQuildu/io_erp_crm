/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api.crm;

import io.swagger.model.crm.ContactGroup;
import io.swagger.model.Error;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import java.util.List;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-11-15T00:41:28.115Z")

@Api(value = "contactGroups", description = "the contactGroups API")
public interface ContactGroupsApi {

    @ApiOperation(value = "Create new contactGroup", notes = "", response = Integer.class, authorizations = {
        @Authorization(value = "Authorization")
    }, tags={ "CRM - contactGroups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Integer.class),
        @ApiResponse(code = 401, message = "Unauthorized - API key is missing or invalid", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class) })
    
    @RequestMapping(value = "/crm/contactGroups",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Integer> createContactGroup(@ApiParam(value = "ContactGroup to create"  )  @RequestBody ContactGroup contactGroup);


    @ApiOperation(value = "Delete contactGroup", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "Authorization")
    }, tags={ "CRM - contactGroups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deleted", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized - API key is missing or invalid", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class) })
    
    @RequestMapping(value = "/crm/contactGroups/{contactGroupId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteContactGroup(@ApiParam(value = "",required=true ) @PathVariable("contactGroupId") Integer contactGroupId);


    @ApiOperation(value = "Returns ContactGroup", notes = "", response = ContactGroup.class, authorizations = {
        @Authorization(value = "Authorization")
    }, tags={ "CRM - contactGroups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = ContactGroup.class),
        @ApiResponse(code = 401, message = "Unauthorized - API key is missing or invalid", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class) })
    
    @RequestMapping(value = "/crm/contactGroups/{contactGroupId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<ContactGroup> getContactGroup(@ApiParam(value = "",required=true ) @PathVariable("contactGroupId") Integer contactGroupId);


    @ApiOperation(value = "Returns list of ContactGroups", notes = "", response = ContactGroup.class, responseContainer = "List", authorizations = {
        @Authorization(value = "Authorization")
    }, tags={ "CRM - contactGroups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = ContactGroup.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized - API key is missing or invalid", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class) })
    
    @RequestMapping(value = "/crm/contactGroups",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<ContactGroup>> getContactGroups();


    @ApiOperation(value = "Update existing contactGroup", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "Authorization")
    }, tags={ "CRM - contactGroups", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Updated", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized - API key is missing or invalid", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class) })
    
    @RequestMapping(value = "/crm/contactGroups/{contactGroupId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateContactGroup(@ApiParam(value = "",required=true ) @PathVariable("contactGroupId") Integer contactGroupId,@ApiParam(value = "ContactGroup to create"  )  @RequestBody ContactGroup contactGroup);

}
