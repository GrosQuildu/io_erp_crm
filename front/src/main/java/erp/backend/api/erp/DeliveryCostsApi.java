/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package main.java.erp.backend.api.erp;

import io.swagger.annotations.*;
import main.java.erp.backend.model.erp.DeliveryCost;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2017-11-15T00:41:28.115Z")

@Api(value = "deliveryCosts", description = "the deliveryCosts API")
public interface DeliveryCostsApi {

    @ApiOperation(value = "Create new deliveryCost", notes = "", response = Integer.class, authorizations = {
        @Authorization(value = "APIKeyHeader")
    }, tags={ "ERP - deliveryCosts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "", response = Integer.class),
        @ApiResponse(code = 401, message = "Unauthorized - API key is missing or invalid", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class) })
    
    @RequestMapping(value = "/erp/deliveryCosts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Integer> createDeliveryCost(@ApiParam(value = "DeliveryCost to create") @Valid @RequestBody DeliveryCost deliveryCost);


    @ApiOperation(value = "Delete deliveryCost", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "APIKeyHeader")
    }, tags={ "ERP - deliveryCosts", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Deleted", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized - API key is missing or invalid", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class) })

    @RequestMapping(value = "/erp/deliveryCosts/{deliveryCostId}",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteDeliveryCost(@ApiParam(value = "", required = true) @PathVariable("deliveryCostId") Integer deliveryCostId);


    @ApiOperation(value = "Returns DeliveryCost", notes = "", response = DeliveryCost.class, authorizations = {
        @Authorization(value = "APIKeyHeader")
    }, tags={ "ERP - deliveryCosts", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "", response = DeliveryCost.class),
        @ApiResponse(code = 401, message = "Unauthorized - API key is missing or invalid", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class) })

    @RequestMapping(value = "/erp/deliveryCosts/{deliveryCostId}",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<DeliveryCost> getDeliveryCost(@ApiParam(value = "", required = true) @PathVariable("deliveryCostId") Integer deliveryCostId);


    @ApiOperation(value = "Returns list of DeliveryCosts", notes = "", response = DeliveryCost.class, responseContainer = "List", authorizations = {
        @Authorization(value = "APIKeyHeader")
    }, tags={ "ERP - deliveryCosts", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "", response = DeliveryCost.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Unauthorized - API key is missing or invalid", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class) })

    @RequestMapping(value = "/erp/deliveryCosts",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<DeliveryCost>> getDeliveryCosts();


    @ApiOperation(value = "Update existing deliveryCost", notes = "", response = Void.class, authorizations = {
        @Authorization(value = "APIKeyHeader")
    }, tags={ "ERP - deliveryCosts", })
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Updated", response = Void.class),
        @ApiResponse(code = 401, message = "Unauthorized - API key is missing or invalid", response = Error.class),
        @ApiResponse(code = 500, message = "Server error", response = Error.class) })

    @RequestMapping(value = "/erp/deliveryCosts/{deliveryCostId}",
        produces = { "application/json" },
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateDeliveryCost(@ApiParam(value = "", required = true) @PathVariable("deliveryCostId") Integer deliveryCostId, @ApiParam(value = "DeliveryCost to create") @Valid @RequestBody DeliveryCost deliveryCost);

}
