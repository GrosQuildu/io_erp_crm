swagger: '2.0'
info:
  description: IO ERP CRM
  version: 1.0.0
  title: IO ERP CRM
  contact: {}
  license:
    name: GPL
    url: 'http://unlicense.org'
host: 'localhost:8080'
basePath: /api
tags:
  - name: task-statuses-api-controller
    description: the taskStatuses API
  - name: delivery-costs-api-controller
    description: the deliveryCosts API
  - name: contact-groups-api-controller
    description: the contactGroups API
  - name: contacts-api-controller
    description: the contacts API
  - name: task-notes-api-controller
    description: the task notes API
  - name: clients-api-controller
    description: the clients API
  - name: ordered-articles-api-controller
    description: the orders API
  - name: orders-api-controller
    description: the orders API
  - name: proformas-api-controller
    description: the proformas API
  - name: articles-api-controller
    description: the articles API
  - name: employees-api-controller
    description: the employees API
  - name: meeting-notes-api-controller
    description: the meeting notes API
  - name: tasks-api-controller
    description: the tasks API
  - name: client-types-api-controller
    description: the clientTypes API
  - name: units-api-controller
    description: the units API
  - name: meetings-api-controller
    description: the meetings API
  - name: task-comments-api-controller
    description: the task comments API
paths:
  /clientTypes:
    get:
      tags:
        - common - clientTypes
      summary: Returns list of ClientTypes
      operationId: getClientTypesUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ClientType'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - common - clientTypes
      summary: Create new clientType
      operationId: createClientTypeUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: clientType
          description: ClientType to create
          required: false
          schema:
            $ref: '#/definitions/ClientType'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/clientTypes/{clientTypeId}':
    get:
      tags:
        - common - clientTypes
      summary: Returns ClientType
      operationId: getClientTypeUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: clientTypeId
          in: path
          description: clientTypeId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ClientType'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - common - clientTypes
      summary: Update existing clientType
      operationId: updateClientTypeUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: clientTypeId
          in: path
          description: clientTypeId
          required: true
          type: integer
          format: int32
        - in: body
          name: clientType
          description: ClientType to update
          required: false
          schema:
            $ref: '#/definitions/ClientType'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - common - clientTypes
      summary: Delete clientType
      operationId: deleteClientTypeUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: clientTypeId
          in: path
          description: clientTypeId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  /clients:
    get:
      tags:
        - common - clients
      summary: Returns list of Clients
      operationId: getClientsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Client'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - common - clients
      summary: Create new client
      operationId: createClientUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: client
          description: Client to create
          required: false
          schema:
            $ref: '#/definitions/Client'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/clients/{clientId}':
    get:
      tags:
        - common - clients
      summary: Returns Client
      operationId: getClientUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: clientId
          in: path
          description: clientId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Client'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - common - clients
      summary: Update existing client
      operationId: updateClientUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: clientId
          in: path
          description: clientId
          required: true
          type: integer
          format: int32
        - in: body
          name: client
          description: Client to update
          required: false
          schema:
            $ref: '#/definitions/Client'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - common - clients
      summary: Delete client
      operationId: deleteClientUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: clientId
          in: path
          description: clientId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  /crm/contactGroups:
    get:
      tags:
        - CRM - contactGroups
      summary: Returns list of ContactGroups
      operationId: getContactGroupsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ContactGroup'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - CRM - contactGroups
      summary: Create new contactGroup
      operationId: createContactGroupUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: contactGroup
          description: ContactGroup to create
          required: false
          schema:
            $ref: '#/definitions/ContactGroup'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/crm/contactGroups/{contactGroupId}':
    get:
      tags:
        - CRM - contactGroups
      summary: Returns ContactGroup
      operationId: getContactGroupUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: contactGroupId
          in: path
          description: contactGroupId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ContactGroup'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - CRM - contactGroups
      summary: Update existing contactGroup
      operationId: updateContactGroupUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: contactGroupId
          in: path
          description: contactGroupId
          required: true
          type: integer
          format: int32
        - in: body
          name: contactGroup
          description: ContactGroup to create
          required: false
          schema:
            $ref: '#/definitions/ContactGroup'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - CRM - contactGroups
      summary: Delete contactGroup
      operationId: deleteContactGroupUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: contactGroupId
          in: path
          description: contactGroupId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  /crm/contacts:
    get:
      tags:
        - CRM - contacts
      summary: Returns list of Contacts
      operationId: getContactsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Contact'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - CRM - contacts
      summary: Create new contact
      operationId: createContactUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: contact
          description: Contact to create
          required: false
          schema:
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/crm/contacts/{contactId}':
    get:
      tags:
        - CRM - contacts
      summary: Returns Contact
      operationId: getContactUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: contactId
          in: path
          description: contactId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Contact'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - CRM - contacts
      summary: Update existing contact
      operationId: updateContactUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: contactId
          in: path
          description: contactId
          required: true
          type: integer
          format: int32
        - in: body
          name: contact
          description: Contact to create
          required: false
          schema:
            $ref: '#/definitions/Contact'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - CRM - contacts
      summary: Delete contact
      operationId: deleteContactUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: contactId
          in: path
          description: contactId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  /crm/meetings:
    get:
      tags:
        - CRM - meetings
      summary: Returns list of Meetings
      operationId: getMeetingsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Meeting'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - CRM - meetings
      summary: Create new meeting
      operationId: createMeetingUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: meeting
          description: Meeting to create
          required: false
          schema:
            $ref: '#/definitions/Meeting'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/crm/meetings/{meetingId}':
    get:
      tags:
        - CRM - meetings
      summary: Returns Meeting
      operationId: getMeetingUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: meetingId
          in: path
          description: meetingId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Meeting'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - CRM - meetings
      summary: Update existing meeting
      operationId: updateMeetingUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: meetingId
          in: path
          description: meetingId
          required: true
          type: integer
          format: int32
        - in: body
          name: meeting
          description: Meeting to update
          required: false
          schema:
            $ref: '#/definitions/Meeting'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - CRM - meetings
      summary: Delete meeting
      operationId: deleteMeetingUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: meetingId
          in: path
          description: meetingId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/crm/meetings/{meetingId}/notes':
    get:
      tags:
        - CRM - meeting notes
      summary: Returns notes belonging to given meeting
      operationId: getMeetingNotesUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: meetingId
          in: path
          description: meetingId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/MeetingNote'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - CRM - meeting notes
      summary: Create new MeetingNote for given meeting
      operationId: createMeetingNotesUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: meetingId
          in: path
          description: meetingId
          required: true
          type: integer
          format: int32
        - in: body
          name: meetingNote
          description: MeetingNote to create
          required: false
          schema:
            $ref: '#/definitions/MeetingNote'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/crm/meetings/{meetingId}/notes/{MeetingNoteId}':
    get:
      tags:
        - CRM - meeting notes
      summary: Returns note belonging to given meeting
      operationId: getMeetingNoteUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: meetingId
          in: path
          description: meetingId
          required: true
          type: integer
          format: int32
        - name: MeetingNoteId
          in: path
          description: MeetingNoteId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MeetingNote'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - CRM - meeting notes
      summary: Update existing MeetingNote
      operationId: updateMeetingNoteUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: meetingId
          in: path
          description: meetingId
          required: true
          type: integer
          format: int32
        - name: MeetingNoteId
          in: path
          description: MeetingNoteId
          required: true
          type: integer
          format: int32
        - in: body
          name: meetingNote
          description: MeetingNote to update
          required: false
          schema:
            $ref: '#/definitions/MeetingNote'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - CRM - meeting notes
      summary: Delete MeetingNote
      operationId: deleteMeetingNoteUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: meetingId
          in: path
          description: meetingId
          required: true
          type: integer
          format: int32
        - name: MeetingNoteId
          in: path
          description: MeetingNoteId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  /crm/taskStatuses:
    get:
      tags:
        - CRM - taskStatuses
      summary: Returns list of TaskStatuses
      operationId: getTaskStatusesUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskStatus'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - CRM - taskStatuses
      summary: Create new taskStatuse
      operationId: createTaskStatuseUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: taskStatuse
          description: TaskStatuse to create
          required: false
          schema:
            $ref: '#/definitions/TaskStatus'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/crm/taskStatuses/{taskStatuseId}':
    get:
      tags:
        - CRM - taskStatuses
      summary: Returns TaskStatuse
      operationId: getTaskStatuseUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskStatuseId
          in: path
          description: taskStatuseId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TaskStatus'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - CRM - taskStatuses
      summary: Update existing taskStatuse
      operationId: updateTaskStatuseUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskStatuseId
          in: path
          description: taskStatuseId
          required: true
          type: integer
          format: int32
        - in: body
          name: taskStatuse
          description: TaskStatuse to create
          required: false
          schema:
            $ref: '#/definitions/TaskStatus'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - CRM - taskStatuses
      summary: Delete taskStatuse
      operationId: deleteTaskStatuseUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskStatuseId
          in: path
          description: taskStatuseId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  /crm/tasks:
    get:
      tags:
        - CRM - tasks
      summary: Returns list of Tasks
      operationId: getTasksUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Task'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - CRM - tasks
      summary: Create new task
      operationId: createTaskUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: task
          description: Task to create
          required: false
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/crm/tasks/{taskId}':
    get:
      tags:
        - CRM - tasks
      summary: Returns Task
      operationId: getTaskUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          description: taskId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Task'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - CRM - tasks
      summary: Update existing task
      operationId: updateTaskUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          description: taskId
          required: true
          type: integer
          format: int32
        - in: body
          name: task
          description: Task to update
          required: false
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - CRM - tasks
      summary: Delete task
      operationId: deleteTaskUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          description: taskId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/crm/tasks/{taskId}/comments':
    get:
      tags:
        - CRM - task comments
      summary: Returns comments belonging to given task
      operationId: getTaskCommentsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          description: taskId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskComment'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - CRM - task comments
      summary: Create new TaskComment for given task
      operationId: createTaskCommentsUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          description: taskId
          required: true
          type: integer
          format: int32
        - in: body
          name: order
          description: TaskComment to create
          required: false
          schema:
            $ref: '#/definitions/TaskComment'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/crm/tasks/{taskId}/comments/{TaskCommentId}':
    get:
      tags:
        - CRM - task comments
      summary: Returns comment belonging to given task
      operationId: getTaskCommentUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          description: taskId
          required: true
          type: integer
          format: int32
        - name: TaskCommentId
          in: path
          description: TaskCommentId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TaskComment'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - CRM - task comments
      summary: Update existing TaskComment
      operationId: updateTaskCommentUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          description: taskId
          required: true
          type: integer
          format: int32
        - name: TaskCommentId
          in: path
          description: TaskCommentId
          required: true
          type: integer
          format: int32
        - in: body
          name: taskComment
          description: TaskComment to update
          required: false
          schema:
            $ref: '#/definitions/TaskComment'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - CRM - task comments
      summary: Delete TaskComment
      operationId: deleteTaskCommentUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          description: taskId
          required: true
          type: integer
          format: int32
        - name: TaskCommentId
          in: path
          description: TaskCommentId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/crm/tasks/{taskId}/notes':
    get:
      tags:
        - CRM - task notes
      summary: Returns notes belonging to given task
      operationId: getTaskNotesUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          description: taskId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/TaskNote'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - CRM - task notes
      summary: Create new TaskNote for given task
      operationId: createTaskNotesUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          description: taskId
          required: true
          type: integer
          format: int32
        - in: body
          name: order
          description: TaskNote to create
          required: false
          schema:
            $ref: '#/definitions/TaskNote'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/crm/tasks/{taskId}/notes/{TaskNoteId}':
    get:
      tags:
        - CRM - task notes
      summary: Returns note belonging to given task
      operationId: getTaskNoteUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          description: taskId
          required: true
          type: integer
          format: int32
        - name: TaskNoteId
          in: path
          description: TaskNoteId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TaskNote'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - CRM - task notes
      summary: Update existing TaskNote
      operationId: updateTaskNoteUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          description: taskId
          required: true
          type: integer
          format: int32
        - name: TaskNoteId
          in: path
          description: TaskNoteId
          required: true
          type: integer
          format: int32
        - in: body
          name: taskNote
          description: TaskNote to update
          required: false
          schema:
            $ref: '#/definitions/TaskNote'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - CRM - task notes
      summary: Delete TaskNote
      operationId: deleteTaskNoteUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          description: taskId
          required: true
          type: integer
          format: int32
        - name: TaskNoteId
          in: path
          description: TaskNoteId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  /employees:
    get:
      tags:
        - common - employees
      summary: Returns list of Employees
      operationId: getEmployeesUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Employee'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - common - employees
      summary: Create new employee (admin only)
      operationId: createEmployeeUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: employee
          description: Employee to create
          required: false
          schema:
            $ref: '#/definitions/Employee'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/employees/{employeeId}':
    get:
      tags:
        - common - employees
      summary: Returns Employee
      operationId: getEmployeeUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: employeeId
          in: path
          description: employeeId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Employee'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - common - employees
      summary: Update existing employee (admin or self only)
      operationId: updateEmployeeUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: employeeId
          in: path
          description: employeeId
          required: true
          type: integer
          format: int32
        - in: body
          name: employee
          description: Employee to update
          required: false
          schema:
            $ref: '#/definitions/Employee'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - common - employees
      summary: Delete employee (admin only)
      operationId: deleteEmployeeUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: employeeId
          in: path
          description: employeeId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/employees/{employeeId}/changePassword':
    put:
      tags:
        - common - employees
      summary: Change employee's password (admin or self only)
      operationId: changePasswordUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: employeeId
          in: path
          description: employeeId
          required: true
          type: integer
          format: int32
        - in: body
          name: changePassword
          description: changePassword
          required: false
          schema:
            $ref: '#/definitions/ChangePassword'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  /erp/articles:
    get:
      tags:
        - ERP - articles
      summary: Returns list of Articles
      operationId: getArticlesUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Article'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - ERP - articles
      summary: Create new article
      operationId: createArticleUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: article
          description: Article to create
          required: false
          schema:
            $ref: '#/definitions/Article'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/erp/articles/{articleId}':
    get:
      tags:
        - ERP - articles
      summary: Returns Article
      operationId: getArticleUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: articleId
          in: path
          description: articleId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Article'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - ERP - articles
      summary: Update existing article
      operationId: updateArticleUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: articleId
          in: path
          description: articleId
          required: true
          type: integer
          format: int32
        - in: body
          name: article
          description: Article to create
          required: false
          schema:
            $ref: '#/definitions/Article'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - ERP - articles
      summary: Delete article
      operationId: deleteArticleUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: articleId
          in: path
          description: articleId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  /erp/deliveryCosts:
    get:
      tags:
        - ERP - deliveryCosts
      summary: Returns list of DeliveryCosts
      operationId: getDeliveryCostsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/DeliveryCost'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - ERP - deliveryCosts
      summary: Create new deliveryCost
      operationId: createDeliveryCostUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: deliveryCost
          description: DeliveryCost to create
          required: false
          schema:
            $ref: '#/definitions/DeliveryCost'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/erp/deliveryCosts/{deliveryCostId}':
    get:
      tags:
        - ERP - deliveryCosts
      summary: Returns DeliveryCost
      operationId: getDeliveryCostUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: deliveryCostId
          in: path
          description: deliveryCostId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/DeliveryCost'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - ERP - deliveryCosts
      summary: Update existing deliveryCost
      operationId: updateDeliveryCostUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: deliveryCostId
          in: path
          description: deliveryCostId
          required: true
          type: integer
          format: int32
        - in: body
          name: deliveryCost
          description: DeliveryCost to create
          required: false
          schema:
            $ref: '#/definitions/DeliveryCost'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - ERP - deliveryCosts
      summary: Delete deliveryCost
      operationId: deleteDeliveryCostUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: deliveryCostId
          in: path
          description: deliveryCostId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  /erp/orders:
    get:
      tags:
        - ERP - orders
      summary: Returns list of Orders
      operationId: getOrdersUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Order_'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - ERP - orders
      summary: Create new order
      operationId: createOrderUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: order
          description: Order_ to create
          required: false
          schema:
            $ref: '#/definitions/Order_'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/erp/orders/{orderId}':
    get:
      tags:
        - ERP - orders
      summary: Returns Order_
      operationId: getOrderUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Order_'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - ERP - orders
      summary: Update existing order
      operationId: updateOrderUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: integer
          format: int32
        - in: body
          name: order
          description: Order_ to create
          required: false
          schema:
            $ref: '#/definitions/Order_'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - ERP - orders
      summary: Delete order
      operationId: deleteOrderUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/erp/orders/{orderId}/articles':
    get:
      tags:
        - ERP - orderedArticles
      summary: Returns articles belonging to given order
      operationId: getOrderedArticlesUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/OrderedArticle'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - ERP - orderedArticles
      summary: Create new OrderedArticle for given order
      operationId: createOrderedArticleUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: integer
          format: int32
        - in: body
          name: orderedArticle
          description: OrderedArticle to create
          required: false
          schema:
            $ref: '#/definitions/OrderedArticle'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/erp/orders/{orderId}/articles/{OrderedArticleId}':
    get:
      tags:
        - ERP - orderedArticles
      summary: Returns article belonging to given order
      operationId: getOrderedArticleUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: integer
          format: int32
        - name: OrderedArticleId
          in: path
          description: OrderedArticleId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/OrderedArticle'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - ERP - orderedArticles
      summary: Update existing OrderedArticle
      operationId: updateOrderedArticleUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: integer
          format: int32
        - name: OrderedArticleId
          in: path
          description: OrderedArticleId
          required: true
          type: integer
          format: int32
        - in: body
          name: orderedArticle
          description: OrderedArticle to create
          required: false
          schema:
            $ref: '#/definitions/OrderedArticle'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - ERP - orderedArticles
      summary: Delete OrderedArticle
      operationId: deleteOrderedArticleUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: integer
          format: int32
        - name: OrderedArticleId
          in: path
          description: OrderedArticleId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/erp/orders/{orderId}/articles/{OrderedArticleId}/netPrice':
    get:
      tags:
        - ERP - orderedArticles
      summary: Returns order's article net price
      operationId: getOrderedArticleNetPriceUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: integer
          format: int32
        - name: OrderedArticleId
          in: path
          description: OrderedArticleId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Compute net price of order's article
          schema:
            type: number
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/erp/orders/{orderId}/articles/{OrderedArticleId}/weight':
    get:
      tags:
        - ERP - orderedArticles
      summary: Returns order's article weight
      operationId: getOrderedArticleWeightUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: integer
          format: int32
        - name: OrderedArticleId
          in: path
          description: OrderedArticleId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Compute weight of order's article
          schema:
            type: number
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/erp/orders/{orderId}/deliveryCosts':
    get:
      tags:
        - ERP - orders
      summary: Returns order's delivery costs
      operationId: getOrderDeliveryCostsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Get or compute (if null) delivery cost of order
          schema:
            type: number
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/erp/orders/{orderId}/netPrice':
    get:
      tags:
        - ERP - orders
      summary: Returns order's net price
      operationId: getOrderNetPriceUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: orderId
          in: path
          description: orderId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Compute net price of order
          schema:
            type: number
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  /erp/proformas:
    get:
      tags:
        - ERP - proformas
      summary: Returns list of Proformas
      operationId: getProformasUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Proforma'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - ERP - proformas
      summary: Create new proforma
      operationId: createProformaUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: proforma
          description: Proforma to create
          required: false
          schema:
            $ref: '#/definitions/Proforma'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/erp/proformas/{proformaId}':
    get:
      tags:
        - ERP - proformas
      summary: Returns Proforma
      operationId: getProformaUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: proformaId
          in: path
          description: proformaId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Proforma'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - ERP - proformas
      summary: Update existing proforma
      operationId: updateProformaUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: proformaId
          in: path
          description: proformaId
          required: true
          type: integer
          format: int32
        - in: body
          name: proforma
          description: Proforma to create
          required: false
          schema:
            $ref: '#/definitions/Proforma'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - ERP - proformas
      summary: Delete proforma
      operationId: deleteProformaUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: proformaId
          in: path
          description: proformaId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  /units:
    get:
      tags:
        - ERP - units
      summary: Returns list of Units
      operationId: getUnitsUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Unit'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    post:
      tags:
        - ERP - units
      summary: Create new unit
      operationId: createUnitUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: unit
          description: Unit to create
          required: false
          schema:
            $ref: '#/definitions/Unit'
      responses:
        '200':
          description: OK
          schema:
            type: integer
            format: int32
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
  '/units/{unitId}':
    get:
      tags:
        - ERP - units
      summary: Returns Unit
      operationId: getUnitUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: unitId
          in: path
          description: unitId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Unit'
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    put:
      tags:
        - ERP - units
      summary: Update existing unit
      operationId: updateUnitUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: unitId
          in: path
          description: unitId
          required: true
          type: integer
          format: int32
        - in: body
          name: unit
          description: Unit to update
          required: false
          schema:
            $ref: '#/definitions/Unit'
      responses:
        '200':
          description: Updated
        '201':
          description: Created
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '404':
          description: Not Found
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
    delete:
      tags:
        - ERP - units
      summary: Delete unit
      operationId: deleteUnitUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: unitId
          in: path
          description: unitId
          required: true
          type: integer
          format: int32
      responses:
        '200':
          description: Deleted
        '204':
          description: No Content
        '401':
          description: Unauthorized - API key is missing or invalid
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden
        '500':
          description: Server error
          schema:
            $ref: '#/definitions/Error'
      security:
        - Authorization: []
securityDefinitions:
  Authorization:
    type: apiKey
    name: Authorization
    in: header
definitions:
  ChangePassword:
    type: object
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
        description: not required for admin
  ClientType:
    type: object
    required:
      - description
      - id
    properties:
      description:
        type: string
      id:
        type: integer
        format: int32
  TaskComment:
    type: object
    required:
      - content
      - employee
      - id
      - task
      - time
    properties:
      content:
        type: string
      employee:
        $ref: '#/definitions/Employee'
      id:
        type: integer
        format: int32
      task:
        $ref: '#/definitions/Task'
      time:
        type: string
        format: date
  Task:
    type: object
    required:
      - employee
      - id
      - taskStatus
      - title
    properties:
      backgroundColor:
        type: string
      comments:
        type: array
        items:
          $ref: '#/definitions/TaskComment'
      contacts:
        type: array
        items:
          $ref: '#/definitions/Contact'
      description:
        type: string
      employee:
        $ref: '#/definitions/Employee'
      employeeCommissioned:
        $ref: '#/definitions/Employee'
      endDate:
        type: string
        format: date
      id:
        type: integer
        format: int32
      isArchived:
        type: boolean
        example: false
      notes:
        type: array
        items:
          $ref: '#/definitions/TaskNote'
      startDate:
        type: string
        format: date
      taskStatus:
        $ref: '#/definitions/TaskStatus'
      title:
        type: string
  Meeting:
    type: object
    required:
      - id
      - meetingDate
    properties:
      contacts:
        type: array
        items:
          $ref: '#/definitions/Contact'
      description:
        type: string
      employees:
        type: array
        items:
          $ref: '#/definitions/Employee'
      id:
        type: integer
        format: int32
      mainEmployee:
        $ref: '#/definitions/Employee'
      meetingDate:
        type: string
        format: date
      nextMeetingDate:
        type: string
        format: date
      notes:
        type: array
        items:
          $ref: '#/definitions/MeetingNote'
      purpose:
        type: string
      telephoneMeeting:
        type: boolean
        example: false
  Article:
    type: object
    required:
      - availability
      - id
      - unit
      - unitPrice
    properties:
      availability:
        type: integer
        format: int32
      id:
        type: integer
        format: int32
      unit:
        $ref: '#/definitions/Unit'
      unitPrice:
        type: number
      weight:
        type: number
        format: float
  DeliveryCost:
    type: object
    required:
      - id
      - price
      - weightFrom
      - weightTo
    properties:
      id:
        type: integer
        format: int32
      price:
        type: number
      weightFrom:
        type: number
        format: float
      weightTo:
        type: number
        format: float
  Error:
    type: object
    required:
      - message
    properties:
      error:
        type: string
      exception:
        type: string
      message:
        type: string
      path:
        type: string
      timestamp:
        type: string
  Unit:
    type: object
    required:
      - id
      - name
      - nameShort
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
      nameShort:
        type: string
  TaskStatus:
    type: object
    required:
      - description
      - id
    properties:
      description:
        type: string
      id:
        type: integer
        format: int32
  OrderedArticle:
    type: object
    required:
      - amount
      - article
      - description
      - id
      - netPrice
      - order
      - unitPrice
    properties:
      amount:
        type: integer
        format: int32
      article:
        $ref: '#/definitions/Article'
      description:
        type: string
      id:
        type: integer
        format: int32
      netPrice:
        type: number
      order:
        $ref: '#/definitions/Order_'
      unitPrice:
        type: number
      weight:
        type: number
        format: float
  Contact:
    type: object
    required:
      - contactGroup
      - employee
      - id
      - mail
      - name
    properties:
      city:
        type: string
      client:
        $ref: '#/definitions/Client'
      contactGroup:
        $ref: '#/definitions/ContactGroup'
      employee:
        $ref: '#/definitions/Employee'
      id:
        type: integer
        format: int32
      mail:
        type: string
      name:
        type: string
      postCode:
        type: string
      street:
        type: string
      telephone:
        type: string
      vip:
        type: boolean
        example: false
  Proforma:
    type: object
    required:
      - id
      - issueDate
      - order
      - paymentDate
      - paymentMethod
      - proformaNumber
      - saleDate
    properties:
      id:
        type: integer
        format: int32
      issueDate:
        type: string
        format: date
      order:
        $ref: '#/definitions/Order_'
      paymentDate:
        type: string
        format: date
      paymentMethod:
        type: string
      proformaNumber:
        type: string
      saleDate:
        type: string
        format: date
  MeetingNote:
    type: object
    required:
      - id
      - meetingId
    properties:
      backgroundColor:
        type: string
      content:
        type: string
      id:
        type: integer
        format: int32
      meeting:
        $ref: '#/definitions/Meeting'
      meetingId:
        $ref: '#/definitions/Meeting'
  TaskNote:
    type: object
    required:
      - content
      - id
      - task
    properties:
      backgroundColor:
        type: string
      content:
        type: string
      id:
        type: integer
        format: int32
      task:
        $ref: '#/definitions/Task'
  Employee:
    type: object
    required:
      - id
      - mail
      - name
      - password
      - role
    properties:
      id:
        type: integer
        format: int32
      mail:
        type: string
      monthSchedule:
        type: number
      name:
        type: string
      password:
        type: string
        description: 'required on post, ignored on update, "***" on get'
      role:
        type: string
        enum:
          - erp
          - crm
          - admin
      telephone:
        type: string
      visibility:
        type: boolean
        example: false
  Order_:
    type: object
    required:
      - client
      - deliveryAddress
      - employee
      - id
      - orderDate
      - orderNumber
      - realizationDeadline
      - state
      - vat
    properties:
      advance:
        type: number
      client:
        $ref: '#/definitions/Client'
      comments:
        type: string
      conditions:
        type: string
      deliveryAddress:
        type: string
      deliveryCost:
        type: number
      employee:
        $ref: '#/definitions/Employee'
      id:
        type: integer
        format: int32
      isDone:
        type: boolean
        example: false
      isPaid:
        type: string
      isSigned:
        type: boolean
        example: false
      orderDate:
        type: string
        format: date
      orderNumber:
        type: string
      realizationDate:
        type: string
        format: date
      realizationDeadline:
        type: string
      state:
        type: string
      vat:
        type: number
        format: float
  Client:
    type: object
    required:
      - clientType
      - id
      - mail
      - name
    properties:
      city:
        type: string
      cityDelivery:
        type: string
      clientType:
        $ref: '#/definitions/ClientType'
      id:
        type: integer
        format: int32
      mail:
        type: string
      name:
        type: string
      nameDelivery:
        type: string
      nip:
        type: string
      postCode:
        type: string
      postCodeDelivery:
        type: string
      street:
        type: string
      streetDelivery:
        type: string
      telephone:
        type: string
  ContactGroup:
    type: object
    required:
      - description
      - id
    properties:
      description:
        type: string
      id:
        type: integer
        format: int32
